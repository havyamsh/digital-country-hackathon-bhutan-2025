// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum KYCStatus {
  APPLIED
  PROCESSING
  ON_HOLD
  APPROVED
  REJECTED
}

model KYCStatusHistory {
  id        Int      @id @default(autoincrement())
  kyc       KYC      @relation(fields: [kycId], references: [id])
  kycId     Int
  oldStatus String
  newStatus String
  changedAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@map("casbin_rule")
}

// Add relation in KYC model
model KYC {
  id                  Int       @id @default(autoincrement())
  userId              Int
  passportUrl         String
  nationalIdUrl       String?
  proofOfAddressUrl   String
  photoUrl            String
  otherDocuments      Json? // [{name: string, url: string}]
  fingerprintScanUrl  String?
  fingerprintImageUrl String?
  signatureUrl        String?
  selfieUrl           String
  status              KYCStatus @default(APPLIED)
  submittedAt         DateTime  @default(now())
  verifiedAt          DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user            User               @relation(fields: [userId], references: [id])
  statusHistories KYCStatusHistory[]
}

// Add relation in User model
model User {
  id            Int            @id @default(autoincrement())
  uid           String         @unique @default(uuid()) @db.Uuid
  name          String
  email         String         @unique
  password      String
  image         String?
  dateOfBirth   String?
  nationality   String?
  phone         String?
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  mother        Json? // {fullName, dateOfBirth, nationality}
  father        Json? // {fullName, dateOfBirth, nationality}
  spouse        Json? // {fullName, dateOfBirth, nationality}
  children      Json? // [{fullName, dateOfBirth, nationality}]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  kycs          KYC[]
  notifications Notification[]
  userRoles     UserRole[]
}

model Role {
  id     Int         @id @default(autoincrement())
  name   String      @unique
  users  UserRole[]
  scopes RoleScope[]
}

model Scope {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  roles RoleScope[]
}

model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int
}

model RoleScope {
  id      Int   @id @default(autoincrement())
  role    Role  @relation(fields: [roleId], references: [id])
  roleId  Int
  scope   Scope @relation(fields: [scopeId], references: [id])
  scopeId Int
}
